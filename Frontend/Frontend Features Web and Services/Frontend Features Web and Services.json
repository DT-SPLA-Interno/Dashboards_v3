{"version":15,"variables":[{"key":"Application","type":"csv","visible":true,"input":"HipsterShopLogs","multiple":false,"defaultValue":"Application Name"},{"key":"service_tag","type":"csv","visible":true,"input":"Azure","multiple":false,"defaultValue":"Service Tag"}],"tiles":{"1":{"type":"markdown","title":"","content":"## üë®‚Äçüíª Frontend: [$Application]()"},"2":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// La funci√≥n obtenerMetricas est√° optimizada para traer solamente los puntos de datos\nasync function obtenerMetricas(selectorMetrica, timeframe_from, timeframe_to) {\n    const response = await metricsClient.query({\n        acceptType: 'application/json; charset=utf-8',\n        from: Date.parse(timeframe_from).toString(),\n        to: Date.parse(timeframe_to).toString(),\n        metricSelector: selectorMetrica\n    });\n    return response.result[0][\"data\"];\n}\n\n// Modificamos esta parte para que el resultado solo contenga timestamps y valores\nexport default async function() {\n    // Definimos el selector de m√©tricas para la consulta\n    let consulta_metricasPorAplicacion = '(100)*(builtin:service.errors.server.successCount:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),tag(~\"'+$service_tag+'~\")\"))))):splitBy())/(builtin:service.requestCount.server:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),tag(~\"'+$service_tag+'~\")\"))))):splitBy())'\n    const metricasPorAplicacion = await obtenerMetricas(consulta_metricasPorAplicacion, $dt_timeframe_from, $dt_timeframe_to);\n\n    // Estructuramos la informaci√≥n para representarla en gr√°ficos, eliminando nombre de la app\n    let resultados = [];\n  \n    for (let i = 0; i < metricasPorAplicacion.length; i++) {\n        for (let j = 0; j < metricasPorAplicacion[i].timestamps.length; j++) {\n            resultados.push({\n                \"timestamp\": new Date(metricasPorAplicacion[i].timestamps[j]).toISOString(),\n                \"Disponibilidad Promedio\": metricasPorAplicacion[i].values[j]\n            });\n        }\n    }\n\n    // Devolvemos solo los resultados sin tipo, ya que no es necesario mapear los tipos de datos\n    return resultados;\n}\n","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{},"leftYAxisSettings":{"scale":"linear","min":"data-min","max":"auto"},"seriesOverrides":[],"legend":{"hidden":true},"colorPalette":"vulnerability-status","fieldMapping":{"timestamp":"timestamp","leftAxisValues":["Disponibilidad Promedio"],"leftAxisDimensions":[]},"hiddenLegendFields":[]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Disponibilidad Promedio"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Disponibilidad Promedio","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":1,"suffix":"","delimiter":false,"added":1708705283321}],"histogram":{"dataMappings":[{"valueAxis":"Disponibilidad Promedio","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"3":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// Funci√≥n de request de data por query\nasync function fetchMetrics(query: string, from: string, to: string) {\n  const response = await metricsClient.query({\n    acceptType: 'application/json; charset=utf-8', \n    from: from,\n    to: to,\n    metricSelector: query // Aqu√≠ utilizamos el par√°metro\n  });\n  return response.result;\n}\n\n// Funci√≥n principal\nexport default async function() {\n\n  // data de prueba\n  const from = new Date($dt_timeframe_from)\n  const to = new Date($dt_timeframe_to)\n  \n  const from_request = from.toISOString().slice(0, 19)\n  const to_request = to.toISOString().slice(0, 19)\n\n  const metrica = '((100)*(builtin:service.errors.server.successCount:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),tag(~\"'+$service_tag+'~\")\"))))):splitBy())/(builtin:service.requestCount.server:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),tag(~\"'+$service_tag+'~\")\"))))):splitBy())):fold(avg)';\n  \n  const metric_response = await fetchMetrics(metrica, from_request, to_request);\n  const metric_data = metric_response[0].data[0][\"values\"][0];\n  \n  return {\"Disponibilidad promedio\" : metric_data };\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"Disponibilidad promedio","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":99},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-06-default, #a9780f)"},"comparator":"‚â•","label":"","value":98},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"SLO Disponibilidad","prefixIcon":"IntegrationsIcon","recordField":"Disponibilidad promedio","autoscale":true,"alignment":"center","colorThresholdTarget":"background"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Disponibilidad promedio"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Disponibilidad promedio","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1708704212646}],"histogram":{"dataMappings":[{"valueAxis":"Disponibilidad promedio","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"4":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// La funci√≥n obtenerMetricas est√° optimizada para traer solamente los puntos de datos\nasync function obtenerMetricas(selectorMetrica, timeframe_from, timeframe_to) {\n    const response = await metricsClient.query({\n        acceptType: 'application/json; charset=utf-8',\n        from: Date.parse(timeframe_from).toString(),\n        to: Date.parse(timeframe_to).toString(),\n        metricSelector: selectorMetrica\n    });\n    return response.result[0][\"data\"];\n}\n\n// Modificamos esta parte para que el resultado solo contenga timestamps y valores\nexport default async function() {\n    // Definimos el selector de m√©tricas para la consulta\n    let consulta_metricasPorAplicacion = '((builtin:service.response.time:avg:partition(\"latency\",value(\"good\",lt(10000))):filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),tag(~\"'+$service_tag+'~\")\"))))):splitBy():count:default(0))/(builtin:service.response.time:avg:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),tag(~\"'+$service_tag+'~\")\"))))):splitBy():count)*(100)):default(100,always)'\n    const metricasPorAplicacion = await obtenerMetricas(consulta_metricasPorAplicacion, $dt_timeframe_from, $dt_timeframe_to);\n\n    // Estructuramos la informaci√≥n para representarla en gr√°ficos, eliminando nombre de la app\n    let resultados = [];\n  \n    for (let i = 0; i < metricasPorAplicacion.length; i++) {\n        for (let j = 0; j < metricasPorAplicacion[i].timestamps.length; j++) {\n            resultados.push({\n                \"timestamp\": new Date(metricasPorAplicacion[i].timestamps[j]).toISOString(),\n                \"Performance Promedio\": metricasPorAplicacion[i].values[j]\n            });\n        }\n    }\n\n    // Devolvemos solo los resultados sin tipo, ya que no es necesario mapear los tipos de datos\n    return resultados;\n}\n","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{},"leftYAxisSettings":{"scale":"linear","min":"data-min","max":"auto"},"seriesOverrides":[],"legend":{"hidden":true},"colorPalette":"vulnerability-status","fieldMapping":{"timestamp":"timestamp","leftAxisValues":["Performance Promedio"],"leftAxisDimensions":[]},"hiddenLegendFields":[]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Performance Promedio"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Performance Promedio","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":1,"suffix":"","delimiter":false,"added":1708705283321}],"histogram":{"dataMappings":[{"valueAxis":"Performance Promedio","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"5":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// Funci√≥n de request de data por query\nasync function fetchMetrics(query: string, from: string, to: string) {\n  const response = await metricsClient.query({\n    acceptType: 'application/json; charset=utf-8', \n    from: from,\n    to: to,\n    metricSelector: query // Aqu√≠ utilizamos el par√°metro\n  });\n  return response.result;\n}\n\n// Funci√≥n principal\nexport default async function() {\n\n  // data de prueba\n  const from = new Date($dt_timeframe_from)\n  const to = new Date($dt_timeframe_to)\n  \n  const from_request = from.toISOString().slice(0, 19)\n  const to_request = to.toISOString().slice(0, 19)\n\n  const metrica = '(((builtin:service.response.time:avg:partition(\"latency\",value(\"good\",lt(10000))):filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),tag(~\"'+$service_tag+'~\")\"))))):splitBy():count:default(0))/(builtin:service.response.time:avg:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),tag(~\"'+$service_tag+'~\")\"))))):splitBy():count)*(100)):default(100,always)):fold(avg)';\n  \n  const metric_response = await fetchMetrics(metrica, from_request, to_request);\n  const metric_data = metric_response[0].data[0][\"values\"][0];\n  \n  return {\"Performance promedio\" : metric_data };\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"Performance promedio","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":90},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-06-default, #a9780f)"},"comparator":"‚â•","label":"","value":50},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"SLO Performance","prefixIcon":"ResourceContentionIcon","recordField":"Performance promedio","autoscale":true,"alignment":"center","colorThresholdTarget":"background"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Performance promedio"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Performance promedio","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1708704212646}],"histogram":{"dataMappings":[{"valueAxis":"Performance promedio","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"6":{"type":"markdown","title":"","content":"#"},"7":{"type":"markdown","title":"","content":"#### üåê Reporte detallado por servicio"},"10":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nasync function obtenerMetricas(selectorMetrica, dt_timeframe_from, dt_timeframe_to) {\n    const response = await metricsClient.query({\n        acceptType: 'application/json; charset=utf-8',\n        from: Date.parse(dt_timeframe_from).toString(),\n        to: Date.parse(dt_timeframe_to).toString(),\n        metricSelector: selectorMetrica\n    });\n    return response.result[0][\"data\"];\n}\n\nexport default async function() {\n    let consulta_metricasPorAplicacion = 'builtin:apps.web.apdex.userType:filter(and(or(in(\"dt.entity.application\",entitySelector(\"type(application),entityName.equals(~\"'+$Application+'~\")\"))))):splitBy()'\n    const metricasPorAplicacion = await obtenerMetricas(consulta_metricasPorAplicacion, $dt_timeframe_from, $dt_timeframe_to);\n    \n    let resultados = [];\n  \n    for (let i = 0; i < metricasPorAplicacion.length; i++) {\n        for (let j = 0; j < metricasPorAplicacion[i].timestamps.length; j++) {\n            resultados.push({\n                \"timestamp\": new Date(metricasPorAplicacion[i].timestamps[j]).toISOString(),\n                \"Apdex\": metricasPorAplicacion[i].values[j]\n            });\n        }\n    }\n    \n    return resultados;\n}\n","visualization":"lineChart","visualizationSettings":{"thresholds":[{"id":1,"field":"","title":"","isEnabled":true,"rules":[{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-03-default, #2a7453)"},"comparator":"‚â•","label":"Excellent","value":0.94},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"Good","value":0.85},{"id":3,"color":"#FFFF00","comparator":"‚â•","label":"Fair","value":0.7},{"id":4,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"Poor","value":0.5},{"id":5,"color":{"Default":"var(--dt-colors-charts-security-risk-level-critical-default, #8a0012)"},"comparator":"‚â•","label":"Unacceptable","value":0},{"id":6,"color":{"Default":"var(--dt-colors-charts-loglevel-none-default, #2c2f3f)"},"comparator":"‚â•","label":"","value":1}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{},"leftYAxisSettings":{"scale":"linear","min":0,"max":1,"label":""},"seriesOverrides":[{"seriesId":["Apdex"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-02-default, #2c2f3f)"}}}],"legend":{"hidden":true},"colorPalette":"apdex","xAxisScaling":"analyzedTimeframe","fieldMapping":{"timestamp":"timestamp","leftAxisValues":["Apdex"],"leftAxisDimensions":[]},"hiddenLegendFields":[]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Apdex"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Disponibilidad Promedio","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1708705283321}],"histogram":{"dataMappings":[{"valueAxis":"Apdex","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"11":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nasync function fetchMetrics(query: string, from: string, to: string) {\n  const response = await metricsClient.query({\n    acceptType: 'application/json; charset=utf-8', \n    from: from,\n    to: to,\n    metricSelector: query\n  });\n  return response.result;\n}\n\nexport default async function() {\n\n  const from = new Date($dt_timeframe_from)\n  const to = new Date($dt_timeframe_to)\n  \n  const from_request = from.toISOString().slice(0, 19)\n  const to_request = to.toISOString().slice(0, 19)\n\n  const metrica = '((((builtin:apps.web.actionCount.category:filter(and(or(eq(\"Apdex category\",SATISFIED)))):splitBy(\"dt.entity.application\")):value:fold(value)+(builtin:apps.web.actionCount.category:filter(and(or(eq(\"Apdex category\",TOLERATING)))):splitBy(\"dt.entity.application\")):value:fold(value)*(0.5))/(builtin:apps.web.actionCount.category:splitBy(\"dt.entity.application\")):value:fold(value)):value:fold(value)):filter(and(or(in(\"dt.entity.application\",entitySelector(\"type(application),entityName.equals(~\"'+$Application+'~\")\")))))';\n  \n  const metric_response = await fetchMetrics(metrica, from_request, to_request);\n  const metric_data = metric_response[0].data[0][\"values\"][0];\n  \n  return {\"Apdex Rate\" : metric_data };\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"Apdex Rate","title":"","isEnabled":true,"rules":[{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-03-default, #2a7453)"},"comparator":"‚â§","label":"","value":1},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â§","label":"","value":0.94},{"id":3,"color":"#E49E43","comparator":"‚â§","label":"","value":0.85},{"id":4,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â§","label":"","value":0.7},{"id":5,"color":{"Default":"var(--dt-colors-charts-security-risk-level-critical-default, #8a0012)"},"comparator":"‚â§","label":"","value":0.5}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"Apdex Rate","prefixIcon":"ResourceContentionIcon","autoscale":true,"sparklineSettings":{"isVisible":false},"alignment":"center","trend":{"isVisible":false,"isRelative":true},"colorThresholdTarget":"background","recordField":"Apdex Rate"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Apdex Rate"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Apdex Rate","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1706633917292}],"histogram":{"dataMappings":[{"valueAxis":"Apdex Rate","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"15":{"type":"markdown","title":"","content":"##### Definici√≥n APDEX\n\n(Application Performance Index) es un est√°ndar para medir el rendimiento de aplicaciones y servicios, enfocado en la satisfacci√≥n del usuario. [documentaci√≥n de Dynatrace](https://docs.dynatrace.com/docs/shortlink/apdex).\n\n![Apdex Formula](https://assets-global.website-files.com/5babb9f91ab233ff5f53ce10/6086b4e47dd6ab9eb00fffa5_Apdex-Formula.png)"},"21":{"type":"markdown","title":"","content":"### Servcios Backend $Application:\n##### [Lista de Servicios $Application](https://tyf28255.apps.dynatrace.com/ui/apps/dynatrace.classic.services/ui/services?gtf=-2h&gf=-8620202732292786476&sorting=name%3Basc&filter=NON_DATABASE_SERVICE-TAG%3D$Application)\n\n#### SLO de Disponibilidad\n\nEl SLO de Disponibilidad mide el porcentaje de solicitudes exitosas frente al total de solicitudes para un servicio etiquetado como `$Application`.\n\n#### SLO de Performance\n\nEl SLO de Performance eval√∫a el rendimiento del servicio basado en el tiempo de respuesta promedio, considerando como buenas las respuestas menores a 1000 ms para servicios etiquetados como `$Application`.\n"},"23":{"type":"markdown","title":"","content":"#"},"24":{"type":"markdown","title":"","content":"![Logo](xxxx.png)"},"25":{"type":"code","title":"Detalle por Servicio WEB REQUEST","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\nimport { queryExecutionClient } from \"@dynatrace-sdk/client-query\";\n\nconst service_type = \"WEB_REQUEST_SERVICE\";\n\nasync function fetchMetrics(query, from, to) {\n    const response = await metricsClient.query({ acceptType: 'application/json; charset=utf-8', from, to, metricSelector: query });\n    return response.result;\n}\n\nfunction transformarObjeto(objetoOriginal, nuevoNombre) {\n    return objetoOriginal.map(item => ({ serviceid: item.dimensions[1], servicename: item.dimensions[0], [nuevoNombre]: item.values[0] }));\n}\n\nexport default async function() {\n\n    const filter_tag = ':filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),tag(~\"'+$service_tag+'~\")\")))))';\n    const filter_service_type = ':filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),serviceType(~\"'+service_type+'~\")\")))))'\n    const filter = filter_tag+filter_service_type\n    const split = ':splitBy(\"dt.entity.service\")';\n    const entity_name = ':names'\n  \n    const metricas = {\n      \"Request Count\" : '(builtin:service.requestCount.total'+filter+split+':sort(value(auto,descending))):fold(sum)'+entity_name,\n      \"Tiempo respuesta\" : '(builtin:service.response.time'+filter+split+':sort(value(auto,descending))):fold(avg)'+entity_name,\n      \"Failure Rate\" : '(builtin:service.errors.total.rate'+filter+split+':sort(value(auto,descending))):fold(avg)'+entity_name,\n      \"Failure Count\" : '(builtin:service.errors.server.count'+filter+split+':sort(value(auto,descending))):fold(value)'+entity_name\n    };\n\n    let result = {};\n    \n    for (const metricName in metricas) {\n        if (metricas.hasOwnProperty(metricName)) {\n            const metric_response = await fetchMetrics(metricas[metricName], $dt_timeframe_from, $dt_timeframe_to);\n            const metric_data = transformarObjeto(metric_response[0].data, metricName);\n\n            for (const item of metric_data) {\n                if (!result[item.serviceid]) {\n                    result[item.serviceid] = { serviceid: item.serviceid, servicename: item.servicename };\n                }\n                result[item.serviceid][metricName] = item[metricName];\n            }\n        }\n    }\n\n    let finalResult = Object.values(result).map(item => {\n        return {\n            id: item.serviceid,\n            \"Service Name\": item.servicename,\n            \"Request Count\": item[\"Request Count\"],\n            \"Tiempo respuesta\": item[\"Tiempo respuesta\"],\n            \"Failure Rate\": item[\"Failure Rate\"],\n            \"Failure Count\": item[\"Failure Count\"]\n        };\n    });\n\n    return finalResult;\n}","visualization":"table","visualizationSettings":{"thresholds":[{"id":1,"field":"Disponibilidad","title":"Disponibilidad","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":99},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":80},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0}]},{"id":2,"field":"Performance","title":"Performance","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":90},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":50},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0}]},{"id":4,"field":"Failure Rate","title":"Failure Rate","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0.5},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":0.1},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":0}]},{"id":5,"field":"Tiempo respuesta","title":"Tiempo Respuesta","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":1500000},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":2000000}]},{"id":6,"field":"id","title":"","isEnabled":true,"rules":[{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-05-default, #84859a)"},"comparator":"!=","label":"","value":"0"}]},{"id":7,"field":"Failure Count","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"=","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":""},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":">","label":"","value":0}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"id","valueAxis":"Request Count","categoryAxisLabel":"id","valueAxisLabel":"Request Count"},"hiddenLegendFields":[]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[["id"],["Service"],["Disponibilidad"],["Performance"],["Request Count"],["Tiempo respuesta"],["Failure Rate"]],"columnWidths":{"[\"Service\"]":252.99826049804688,"[\"Failure Rate\"]":132.99826049804688,"[\"Service Name\"]":348},"colorThresholdTarget":"value","sortBy":{"columnId":"[\"Request Count\"]","direction":"descending"}},"honeycomb":{"shape":"square","dataMappings":{"value":"Request Count"},"legend":"auto","displayedFields":["id"],"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Disponibilidad","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1708708838246},{"identifier":"Performance","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1708709010865},{"identifier":"Tiempo respuesta","unitCategory":"time","baseUnit":"microsecond","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1708709023759},{"identifier":"Failure Rate","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1708959408762},{"identifier":"Request Count","unitCategory":"unspecified","baseUnit":"count_per_request","displayUnit":null,"decimals":2,"suffix":"","delimiter":true,"added":1715675583067},{"identifier":"Failure Count","unitCategory":"unspecified","baseUnit":"count_per_request","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1716407566090}],"histogram":{"dataMappings":[{"valueAxis":"Request Count","rangeAxis":""},{"valueAxis":"Tiempo respuesta","rangeAxis":""},{"valueAxis":"Failure Rate","rangeAxis":""},{"valueAxis":"Failure Count","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"26":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nasync function fetchMetrics(query: string, from: string, to: string) {\n  const response = await metricsClient.query({\n    acceptType: 'application/json; charset=utf-8', \n    from: from,\n    to: to,\n    metricSelector: query\n  });\n  return response.result;\n}\n\nexport default async function() {\n  \n  const minutes = 24 * 60; // 24 hours in minutes\n\n  const now = new Date();\n  const from = new Date(now.getTime() - minutes * 60 * 1000);\n  const to = now;\n\n  console.log(\"$dt_timeframe_from: \"+$dt_timeframe_from);\n  console.log(\"from..............: \"+from);\n  \n  const from_request = from.toISOString().slice(0, 19);\n  const to_request = to.toISOString().slice(0, 19);\n\n  const metrica = '((((builtin:apps.web.actionCount.category:filter(and(or(eq(\"Apdex category\",SATISFIED)))):splitBy(\"dt.entity.application\")):value:fold(value)+(builtin:apps.web.actionCount.category:filter(and(or(eq(\"Apdex category\",TOLERATING)))):splitBy(\"dt.entity.application\")):value:fold(value)*(0.5))/(builtin:apps.web.actionCount.category:splitBy(\"dt.entity.application\")):value:fold(value)):value:fold(value)):filter(and(or(in(\"dt.entity.application\",entitySelector(\"type(application),entityName.equals(~\"'+$Application+'~\")\")))))';\n  \n  const metric_response = await fetchMetrics(metrica, from_request, to_request);\n  const metric_data = metric_response[0].data[0][\"values\"][0];\n  \n  return {\"Apdex Rate\" : metric_data };\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"Apdex Rate","title":"","isEnabled":true,"rules":[{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-03-default, #2a7453)"},"comparator":"‚â§","label":"","value":1},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â§","label":"","value":0.94},{"id":3,"color":"#E49E43","comparator":"‚â§","label":"","value":0.85},{"id":4,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â§","label":"","value":0.7},{"id":5,"color":{"Default":"var(--dt-colors-charts-security-risk-level-critical-default, #8a0012)"},"comparator":"‚â§","label":"","value":0.5}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"Apdex last 24h","prefixIcon":"ResourceContentionIcon","autoscale":true,"sparklineSettings":{"isVisible":false},"alignment":"center","trend":{"isVisible":false,"isRelative":true},"colorThresholdTarget":"background","recordField":"Apdex Rate"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Apdex Rate"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Apdex Rate","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1706633917292}],"histogram":{"dataMappings":[{"valueAxis":"Apdex Rate","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"27":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nasync function fetchMetrics(query: string, from: string, to: string) {\n  const response = await metricsClient.query({\n    acceptType: 'application/json; charset=utf-8', \n    from: from,\n    to: to,\n    metricSelector: query\n  });\n  return response.result;\n}\n\nexport default async function() {\n\n  const minutes = 5; // 5 minutes\n\n  const now = new Date();\n  const from = new Date(now.getTime() - minutes * 60 * 1000);\n  const to = now;\n  \n  const from_request = from.toISOString().slice(0, 19);\n  const to_request = to.toISOString().slice(0, 19);\n\n  console.log(\"$dt_timeframe_from: \"+$dt_timeframe_from);\n  console.log(\"from..............: \"+from);\n  \n  const metrica = '((((builtin:apps.web.actionCount.category:filter(and(or(eq(\"Apdex category\",SATISFIED)))):splitBy(\"dt.entity.application\")):value:fold(value)+(builtin:apps.web.actionCount.category:filter(and(or(eq(\"Apdex category\",TOLERATING)))):splitBy(\"dt.entity.application\")):value:fold(value)*(0.5))/(builtin:apps.web.actionCount.category:splitBy(\"dt.entity.application\")):value:fold(value)):value:fold(value)):filter(and(or(in(\"dt.entity.application\",entitySelector(\"type(application),entityName.equals(~\"'+$Application+'~\")\")))))';\n  \n  const metric_response = await fetchMetrics(metrica, from_request, to_request);\n  const metric_data = metric_response[0].data[0][\"values\"][0];\n  \n  return {\"Apdex Rate\" : metric_data };\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"Apdex Rate","title":"","isEnabled":true,"rules":[{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-03-default, #2a7453)"},"comparator":"‚â§","label":"","value":1},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â§","label":"","value":0.94},{"id":3,"color":"#E49E43","comparator":"‚â§","label":"","value":0.85},{"id":4,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â§","label":"","value":0.7},{"id":5,"color":{"Default":"var(--dt-colors-charts-security-risk-level-critical-default, #8a0012)"},"comparator":"‚â§","label":"","value":0.5}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"Apdex last 5m","prefixIcon":"ResourceContentionIcon","autoscale":true,"sparklineSettings":{"isVisible":false},"alignment":"center","trend":{"isVisible":false,"isRelative":true},"colorThresholdTarget":"background","recordField":"Apdex Rate"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Apdex Rate"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Apdex Rate","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1706633917292}],"histogram":{"dataMappings":[{"valueAxis":"Apdex Rate","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"29":{"type":"code","title":"","input":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n// Convert datetime string to timestamp in milliseconds\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Transform data to the desired format and sort by value in descending order\nfunction transformFormatDonut(data) {\n  return Object.keys(data.values)\n    .map(key => ({\n      category: key,\n      value: data.values[key][0],\n    }))\n    .sort((a, b) => b.value - a.value);\n}\n\n// Fetch user session data\nasync function fetchUserSessionData(query, from, to) {\n  const startTimestamp = toTimestamp(from);\n  const endTimestamp = toTimestamp(to);\n\n  const data = await rumUserSessionsClient.getUsqlResultAsTree({\n    startTimestamp,\n    endTimestamp,\n    query,\n  });\n\n  return data;\n}\n\nexport default async function () {\n  const query = \"select userExperienceScore, count(distinct userSessionId) FROM usersession where useraction.application=\\\"\"+$Application+\"\\\" GROUP BY userExperienceScore\";\n  const data = await fetchUserSessionData(query, $dt_timeframe_from, $dt_timeframe_to);\n  return transformFormatDonut(data);\n}\n","visualization":"pieChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative","showTotalValue":false,"hideLabels":false,"totalValueLabel":"User Sessions","groupingName":null},"categoryOverrides":{"FRUSTRATED":{"color":"var(--dt-colors-charts-loglevel-emergency-default, #9033a3)","added":1719282190769},"TOLERATED":{"color":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)","added":1719282205218},"SATISFIED":{"color":"var(--dt-colors-charts-categorical-themed-swamps-color-01-default, #1c520a)","added":1719282225825}},"categoricalBarChartSettings":{"categoryAxis":"category","valueAxis":"value","categoryAxisLabel":"category","valueAxisLabel":"value"},"legend":{"position":"bottom","hidden":false},"colorPalette":"categorical"},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"value"},"displayedFields":["category"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"value","rangeAxis":""}]},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"30":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// Function to convert date string to timestamp\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Function to fetch metrics\nasync function obtenerMetricas(selectorMetrica, dt_timeframe_from, dt_timeframe_to) {\n  const response = await metricsClient.query({\n    acceptType: 'application/json; charset=utf-8',\n    from: toTimestamp(dt_timeframe_from).toString(),\n    to: toTimestamp(dt_timeframe_to).toString(),\n    metricSelector: selectorMetrica,\n  });\n  return response.result[0][\"data\"];\n}\n\n// Function to transform metrics data to HistogramChartFormat\nfunction transformToHistogramChartFormat(metricasPorAplicacion) {\n  const results = {};\n\n  for (let i = 0; i < metricasPorAplicacion.length; i++) {\n    const category = metricasPorAplicacion[i].dimensionMap[\"Apdex category\"];\n    const timestamps = metricasPorAplicacion[i].timestamps;\n    const values = metricasPorAplicacion[i].values;\n\n    for (let j = 0; j < timestamps.length; j++) {\n      const timestamp = new Date(timestamps[j]).toISOString();\n\n      if (!results[timestamp]) {\n        results[timestamp] = {\n          timestamp,\n          SATISFIED: 0,\n          TOLERATING: 0,\n          FRUSTRATED: 0,\n        };\n      }\n\n      results[timestamp][category] = values[j];\n    }\n  }\n\n  return Object.values(results);\n}\n\nexport default async function () {\n  const query = 'builtin:apps.web.actionCount.category:filter(and(or(in(\"dt.entity.application\",entitySelector(\"type(application),entityName.equals(~\"'+$Application+'~\")\"))))):splitBy(\"dt.entity.application\",\"Apdex category\"):value:sort(value(sum,descending))';\n  const metricasPorAplicacion = await obtenerMetricas(query, $dt_timeframe_from, $dt_timeframe_to);\n  const formattedData = transformToHistogramChartFormat(metricasPorAplicacion);\n  return formattedData;\n}\n","visualization":"barChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{},"leftYAxisSettings":{"scale":"linear","min":"auto","max":"auto","label":""},"seriesOverrides":[{"seriesId":["SATISFIED"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-themed-swamps-color-01-default, #1c520a)"}}},{"seriesId":["TOLERATING"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"}}},{"seriesId":["FRUSTRATED"],"override":{"color":{"Default":"var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"}}}],"legend":{"hidden":false,"position":"bottom"},"colorPalette":"vulnerability-status","xAxisScaling":"analyzedTimeframe","fieldMapping":{"timestamp":"timestamp","leftAxisValues":["SATISFIED","TOLERATING","FRUSTRATED"],"leftAxisDimensions":[],"rightAxisValues":[]},"hiddenLegendFields":[],"valueRepresentation":"absolute"},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"SATISFIED"},"legend":"auto","displayedFields":[null],"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[],"histogram":{"dataMappings":[{"valueAxis":"SATISFIED","rangeAxis":""},{"valueAxis":"TOLERATING","rangeAxis":""},{"valueAxis":"FRUSTRATED","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"31":{"type":"code","title":"","input":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n// Convert datetime string to timestamp in milliseconds\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Transform data to the desired format\nfunction transformFormatSingleValue(data) {\n  return data.values[0];\n}\n\n// Fetch user session data\nasync function fetchUserSessionData(query, from, to) {\n  const startTimestamp = toTimestamp(from);\n  const endTimestamp = toTimestamp(to);\n\n  const data = await rumUserSessionsClient.getUsqlResultAsTree({\n    startTimestamp,\n    endTimestamp,\n    query,\n  });\n\n  return data;\n}\n\nexport default async function () {\n  const query = \"SELECT count(distinct userSessionId) FROM usersession WHERE useraction.application=\\\"\"+$Application+\"\\\"\";\n  const data = await fetchUserSessionData(query, $dt_timeframe_from, $dt_timeframe_to);\n  return transformFormatSingleValue(data);\n}\n","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative","showTotalValue":true,"hideLabels":false,"totalValueLabel":"User Sessions"},"categoryOverrides":{"FRUSTRATED":{"color":"var(--dt-colors-charts-loglevel-emergency-default, #9033a3)","added":1719282190769},"TOLERATED":{"color":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)","added":1719282205218},"SATISFIED":{"color":"var(--dt-colors-charts-categorical-themed-swamps-color-01-default, #1c520a)","added":1719282225825}},"categoricalBarChartSettings":{"categoryAxisLabel":"category","valueAxisLabel":"value"},"legend":{"position":"bottom","hidden":false},"colorPalette":"categorical"},"singleValue":{"showLabel":true,"label":"üßçUsers Sessions","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"isVisible":false},"sparklineSettings":{"isVisible":false}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"element"},"displayedFields":[null],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}]},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1719290266231}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"32":{"type":"markdown","title":"","content":"#### Transactions by User Action Satisfaction"},"33":{"type":"code","title":"","input":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n// Convert datetime string to timestamp in milliseconds\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Transform data to the desired format and sort by value in descending order\nfunction transformFormatDonut(data) {\n  return Object.keys(data.values)\n    .map(key => ({\n      category: key,\n      value: data.values[key][0],\n    }))\n    .sort((a, b) => b.value - a.value);\n}\n\n// Fetch user session data\nasync function fetchUserSessionData(query, from, to) {\n  const startTimestamp = toTimestamp(from);\n  const endTimestamp = toTimestamp(to);\n\n  const data = await rumUserSessionsClient.getUsqlResultAsTree({\n    startTimestamp,\n    endTimestamp,\n    query,\n  });\n\n  return data;\n}\n\nexport default async function () {\n  const query = \"SELECT OSFAMILY, count(distinct userSessionId) FROM usersession WHERE useraction.application=\\\"\"+$Application+\"\\\" group by osFamily\";\n  const data = await fetchUserSessionData(query, $dt_timeframe_from, $dt_timeframe_to);\n  return transformFormatDonut(data);\n}\n","visualization":"pieChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute","groupingThresholdValue":0,"valueType":"relative","showTotalValue":false,"hideLabels":false,"totalValueLabel":"User Sessions"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"category","valueAxis":"value","categoryAxisLabel":"category","valueAxisLabel":"value"},"legend":{"position":"bottom","hidden":false},"colorPalette":"categorical"},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{},"sortBy":{"columnId":"[\"value\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"value"},"displayedFields":["category"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"value","rangeAxis":""}]},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"35":{"type":"code","title":"","input":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n// Convert datetime string to timestamp in milliseconds\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Transform data to the desired format and sort by value in descending order\nfunction transformFormatCategoricalBarChart(data) {\n  const result = Object.keys(data).map(key => {\n    const categoryData = data[key];\n    return {\n      category: key,\n      SATISFIED: categoryData.SATISFIED ? categoryData.SATISFIED[0] : 0,\n      TOLERATING: categoryData.TOLERATING ? categoryData.TOLERATING[0] : 0,\n      FRUSTRATED: categoryData.FRUSTRATED ? categoryData.FRUSTRATED[0] : 0,\n    };\n  });\n\n  return result.sort((a, b) => {\n    const totalA = a.SATISFIED + a.TOLERATING + a.FRUSTRATED;\n    const totalB = b.SATISFIED + b.TOLERATING + b.FRUSTRATED;\n    return totalB - totalA;\n  });\n}\n\n// Fetch user session data\nasync function fetchUserSessionData(query, from, to) {\n  const startTimestamp = toTimestamp(from);\n  const endTimestamp = toTimestamp(to);\n\n  const data = await rumUserSessionsClient.getUsqlResultAsTree({\n    startTimestamp,\n    endTimestamp,\n    query,\n  });\n\n  return data.values;\n}\n\nexport default async function () {\n  const query = \"SELECT osFamily, useraction.apdexCategory, count(distinct userSessionId) FROM usersession WHERE useraction.application=\\\"\"+$Application+\"\\\" group by osFamily, useraction.apdexCategory\";\n  const data = await fetchUserSessionData(query, $dt_timeframe_from, $dt_timeframe_to);\n  console.log(query);\n  return transformFormatCategoricalBarChart(data);\n}\n","visualization":"categoricalBarChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative","showTotalValue":true,"hideLabels":false,"totalValueLabel":"User Sessions"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"category","valueAxis":["SATISFIED","TOLERATING","FRUSTRATED"],"categoryAxisLabel":"category","valueAxisLabel":"SATISFIED,TOLERATING,FRUSTRATED","categoryAxisTickLayout":"horizontal","colorPaletteMode":"single-color","scale":"absolute","groupMode":"stacked","layout":"vertical"},"legend":{"position":"bottom","hidden":false},"colorPalette":"apdex"},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"bottom","dataMappings":{"value":"SATISFIED"},"displayedFields":["category"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"SATISFIED","rangeAxis":""},{"valueAxis":"TOLERATING","rangeAxis":""},{"valueAxis":"FRUSTRATED","rangeAxis":""}]},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"36":{"type":"code","title":"","input":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n// Convert datetime string to timestamp in milliseconds\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Transform data to the desired format and sort by value in descending order\nfunction transformFormatCategoricalBarChart(data) {\n  const result = Object.keys(data).map(key => {\n    const categoryData = data[key];\n    return {\n      category: key,\n      SATISFIED: categoryData.SATISFIED ? categoryData.SATISFIED[0] : 0,\n      TOLERATING: categoryData.TOLERATING ? categoryData.TOLERATING[0] : 0,\n      FRUSTRATED: categoryData.FRUSTRATED ? categoryData.FRUSTRATED[0] : 0,\n    };\n  });\n\n  // Sort by total value in descending order and limit to 10 records\n  return result\n    .sort((a, b) => {\n      const totalA = a.SATISFIED + a.TOLERATING + a.FRUSTRATED;\n      const totalB = b.SATISFIED + b.TOLERATING + b.FRUSTRATED;\n      return totalB - totalA;\n    })\n    .slice(0, 10);\n}\n\n// Fetch user session data\nasync function fetchUserSessionData(query, from, to) {\n  const startTimestamp = toTimestamp(from);\n  const endTimestamp = toTimestamp(to);\n\n  const data = await rumUserSessionsClient.getUsqlResultAsTree({\n    startTimestamp,\n    endTimestamp,\n    query,\n  });\n\n  return data.values;\n}\n\nexport default async function () {\n  const query = \"SELECT browserFamily, useraction.apdexCategory, count(distinct userSessionId) FROM usersession WHERE useraction.application=\\\"\"+$Application+\"\\\" group by browserFamily, useraction.apdexCategory\";\n  const data = await fetchUserSessionData(query, $dt_timeframe_from, $dt_timeframe_to);\n  console.log(data);\n  return transformFormatCategoricalBarChart(data);\n}\n","visualization":"categoricalBarChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative","showTotalValue":true,"hideLabels":false,"totalValueLabel":"User Sessions"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"category","valueAxis":["SATISFIED","FRUSTRATED","TOLERATING"],"categoryAxisLabel":"category","valueAxisLabel":"SATISFIED,FRUSTRATED,TOLERATING","categoryAxisTickLayout":"horizontal","colorPaletteMode":"single-color","scale":"absolute","groupMode":"stacked","layout":"vertical"},"legend":{"position":"bottom","hidden":false},"colorPalette":"vulnerability-status"},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"bottom","dataMappings":{"value":"SATISFIED"},"displayedFields":["category"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"SATISFIED","rangeAxis":""},{"valueAxis":"TOLERATING","rangeAxis":""},{"valueAxis":"FRUSTRATED","rangeAxis":""}]},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"37":{"type":"markdown","title":"","content":"#### User Action Satisfaction by SO"},"38":{"type":"markdown","title":"","content":"#### User Sessions by Satisfaction"},"39":{"type":"markdown","title":"","content":"#### User Sessions by SO"},"40":{"type":"markdown","title":"","content":"#### User Sessions by Browser"},"41":{"type":"code","title":"","input":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n// Convert datetime string to timestamp in milliseconds\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Transform data to the desired format and sort by value in descending order\nfunction transformFormatDonut(data) {\n  return Object.keys(data.values)\n    .map(key => ({\n      category: key,\n      value: data.values[key][0],\n    }))\n    .sort((a, b) => b.value - a.value);\n}\n\n// Fetch user session data\nasync function fetchUserSessionData(query, from, to) {\n  const startTimestamp = toTimestamp(from);\n  const endTimestamp = toTimestamp(to);\n\n  const data = await rumUserSessionsClient.getUsqlResultAsTree({\n    startTimestamp,\n    endTimestamp,\n    query,\n  });\n\n  return data;\n}\n\nexport default async function () {\n  const query = \"SELECT browserFamily, count(distinct userSessionId) FROM usersession WHERE useraction.application=\\\"\"+$Application+\"\\\" group by browserFamily\";\n  const data = await fetchUserSessionData(query, $dt_timeframe_from, $dt_timeframe_to);\n  return transformFormatDonut(data);\n}\n","visualization":"pieChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute","groupingThresholdValue":0,"valueType":"relative","showTotalValue":false,"hideLabels":false,"totalValueLabel":"User Sessions"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"category","valueAxis":"value","categoryAxisLabel":"category","valueAxisLabel":"value"},"legend":{"position":"bottom","hidden":false},"colorPalette":"categorical"},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{},"sortBy":{"columnId":"[\"value\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"value"},"displayedFields":["category"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"value","rangeAxis":""}]},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"42":{"type":"markdown","title":"","content":"#### User Action Satisfaction by Browser"},"43":{"type":"code","title":"","input":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n// Convert datetime string to timestamp in milliseconds\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Transform data to the desired format and sort by value in descending order\nfunction transformFormatCategoricalBarChart(data) {\n  const result = Object.keys(data).map(key => {\n    const categoryData = data[key];\n    return {\n      category: key,\n      SATISFIED: categoryData.SATISFIED ? categoryData.SATISFIED[0] : 0,\n      TOLERATING: categoryData.TOLERATING ? categoryData.TOLERATING[0] : 0,\n      FRUSTRATED: categoryData.FRUSTRATED ? categoryData.FRUSTRATED[0] : 0,\n    };\n  });\n\n  return result.sort((a, b) => {\n    const totalA = a.SATISFIED + a.TOLERATING + a.FRUSTRATED;\n    const totalB = b.SATISFIED + b.TOLERATING + b.FRUSTRATED;\n    return totalB - totalA;\n  });\n}\n\n// Fetch user session data\nasync function fetchUserSessionData(query, from, to) {\n  const startTimestamp = toTimestamp(from);\n  const endTimestamp = toTimestamp(to);\n\n  const data = await rumUserSessionsClient.getUsqlResultAsTree({\n    startTimestamp,\n    endTimestamp,\n    query,\n  });\n\n  return data.values;\n}\n\nexport default async function () {\n  const query = \"SELECT osFamily, useraction.apdexCategory, count(distinct userSessionId) FROM usersession WHERE useraction.application=\\\"\"+$Application+\"\\\" group by osFamily, useraction.apdexCategory\";\n  const data = await fetchUserSessionData(query, $dt_timeframe_from, $dt_timeframe_to);\n  console.log(query);\n  return transformFormatCategoricalBarChart(data);\n}\n","visualization":"table","visualizationSettings":{"thresholds":[{"id":1,"field":"SATISFIED","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":0}]},{"id":2,"field":"TOLERATING","title":"","isEnabled":true,"rules":[{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":0}]},{"id":3,"field":"FRUSTRATED","title":"","isEnabled":true,"rules":[{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative","showTotalValue":true,"hideLabels":false,"totalValueLabel":"User Sessions"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"category","valueAxis":"SATISFIED","categoryAxisLabel":"category","valueAxisLabel":"SATISFIED","categoryAxisTickLayout":"horizontal","colorPaletteMode":"single-color","scale":"absolute","groupMode":"stacked","layout":"vertical"},"legend":{"position":"bottom","hidden":false},"colorPalette":"apdex"},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"bottom","dataMappings":{"value":"SATISFIED"},"displayedFields":["category"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"SATISFIED","rangeAxis":""},{"valueAxis":"TOLERATING","rangeAxis":""},{"valueAxis":"FRUSTRATED","rangeAxis":""}]},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"44":{"type":"code","title":"","input":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n// Convert datetime string to timestamp in milliseconds\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Transform data to the desired format and sort by value in descending order\nfunction transformFormatCategoricalBarChart(data) {\n  const result = Object.keys(data).map(key => {\n    const categoryData = data[key];\n    return {\n      category: key,\n      SATISFIED: categoryData.SATISFIED ? categoryData.SATISFIED[0] : 0,\n      TOLERATING: categoryData.TOLERATING ? categoryData.TOLERATING[0] : 0,\n      FRUSTRATED: categoryData.FRUSTRATED ? categoryData.FRUSTRATED[0] : 0,\n    };\n  });\n\n  // Sort by total value in descending order and limit to 10 records\n  return result\n    .sort((a, b) => {\n      const totalA = a.SATISFIED + a.TOLERATING + a.FRUSTRATED;\n      const totalB = b.SATISFIED + b.TOLERATING + b.FRUSTRATED;\n      return totalB - totalA;\n    })\n    //.slice(0, 10)\n    ;\n}\n\n// Fetch user session data\nasync function fetchUserSessionData(query, from, to) {\n  const startTimestamp = toTimestamp(from);\n  const endTimestamp = toTimestamp(to);\n\n  const data = await rumUserSessionsClient.getUsqlResultAsTree({\n    startTimestamp,\n    endTimestamp,\n    query,\n  });\n\n  return data.values;\n}\n\nexport default async function () {\n  const query = \"SELECT browserFamily, useraction.apdexCategory, count(distinct userSessionId) FROM usersession WHERE useraction.application=\\\"\"+$Application+\"\\\" group by browserFamily, useraction.apdexCategory\";\n  const data = await fetchUserSessionData(query, $dt_timeframe_from, $dt_timeframe_to);\n  console.log(data);\n  return transformFormatCategoricalBarChart(data);\n}\n","visualization":"table","visualizationSettings":{"thresholds":[{"id":1,"field":"SATISFIED","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":0}]},{"id":2,"field":"TOLERATING","title":"","isEnabled":true,"rules":[{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":0}]},{"id":3,"field":"FRUSTRATED","title":"","isEnabled":true,"rules":[{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative","showTotalValue":true,"hideLabels":false,"totalValueLabel":"User Sessions"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"category","valueAxis":"SATISFIED","categoryAxisLabel":"category","valueAxisLabel":"SATISFIED","categoryAxisTickLayout":"horizontal","colorPaletteMode":"single-color","scale":"absolute","groupMode":"stacked","layout":"vertical"},"legend":{"position":"bottom","hidden":false},"colorPalette":"vulnerability-status"},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"bottom","dataMappings":{"value":"SATISFIED"},"displayedFields":["category"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"SATISFIED","rangeAxis":""},{"valueAxis":"TOLERATING","rangeAxis":""},{"valueAxis":"FRUSTRATED","rangeAxis":""}]},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"46":{"type":"code","title":"","input":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n// Convert datetime string to timestamp in milliseconds\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Transform data to the desired format\nfunction transformFormatTable(data) {\n  return Object.keys(data).map(key => ({\n    \"User Action\": key,\n    \"javascriptErrorCount\": data[key][0]\n  }));\n}\n\n// Fetch user session data\nasync function fetchUserSessionData(query, from, to) {\n  const startTimestamp = toTimestamp(from);\n  const endTimestamp = toTimestamp(to);\n\n  const data = await rumUserSessionsClient.getUsqlResultAsTree({\n    startTimestamp,\n    endTimestamp,\n    query,\n  });\n\n  return data.values;\n}\n\nexport default async function () {\n  const query = `select useraction.name, sum(useraction.javascriptErrorCount) as JavaScriptError\n                 FROM useraction \n                 where useraction.application = \"${$Application}\" \n                 group by useraction.name \n                 order by JavaScriptError DESC`;\n  const data = await fetchUserSessionData(query, $dt_timeframe_from, $dt_timeframe_to);\n  return transformFormatTable(data);\n}\n","visualization":"table","visualizationSettings":{"thresholds":[{"id":1,"field":"javascriptErrorCount","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":10},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":100}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative","showTotalValue":true,"hideLabels":false,"totalValueLabel":"User Sessions"},"categoryOverrides":{"FRUSTRATED":{"color":"var(--dt-colors-charts-loglevel-emergency-default, #9033a3)","added":1719282190769},"TOLERATED":{"color":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)","added":1719282205218},"SATISFIED":{"color":"var(--dt-colors-charts-categorical-themed-swamps-color-01-default, #1c520a)","added":1719282225825}},"categoricalBarChartSettings":{"categoryAxisLabel":"User Action","valueAxisLabel":"javascriptErrorCount","categoryAxis":"User Action","valueAxis":"javascriptErrorCount","layout":"vertical"},"legend":{"position":"bottom","hidden":false},"colorPalette":"categorical"},"singleValue":{"showLabel":true,"label":"üßçUsers Sessions","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"isVisible":false},"sparklineSettings":{"isVisible":false}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{"[\"User Action\"]":273},"sortBy":{"columnId":"[\"javascriptErrorCount\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"javascriptErrorCount"},"displayedFields":["User Action"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"javascriptErrorCount","rangeAxis":""}]},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1719290266231}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"47":{"type":"markdown","title":"","content":"#### Top User Actions JavaScriptError"},"48":{"type":"markdown","title":"","content":"#### Users by Region"},"50":{"type":"code","title":"","input":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n// Convert datetime string to timestamp in milliseconds\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Transform data to the desired format\nfunction transformFormatTable(data) {\n  const result = [];\n  for (const region in data) {\n    for (const country in data[region]) {\n      result.push({\n        \"Region\": region,\n        \"Country\": country,\n        \"Count\": data[region][country][0]\n      });\n    }\n  }\n  return result;\n}\n\n// Fetch user session data\nasync function fetchUserSessionData(query, from, to) {\n  const startTimestamp = toTimestamp(from);\n  const endTimestamp = toTimestamp(to);\n\n  const data = await rumUserSessionsClient.getUsqlResultAsTree({\n    startTimestamp,\n    endTimestamp,\n    query,\n  });\n\n  return data.values;\n}\n\nexport default async function () {\n  const query = `SELECT region, country, COUNT(DISTINCT userSessionId) as User \n                 FROM usersession \n                 WHERE useraction.application=\"${$Application}\" \n                 GROUP BY region, country`;\n  const data = await fetchUserSessionData(query, $dt_timeframe_from, $dt_timeframe_to);\n  console.log(data);\n  return transformFormatTable(data);\n}\n","visualization":"pieChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative","showTotalValue":false,"hideLabels":false,"totalValueLabel":"User Sessions"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"Region","valueAxis":"Count","categoryAxisLabel":"Region","valueAxisLabel":"Count"},"legend":{"position":"bottom","hidden":false},"colorPalette":"categorical"},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{},"sortBy":{"columnId":"[\"value\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"Count"},"displayedFields":["Region"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"Count","rangeAxis":""}]},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"53":{"type":"code","title":"","input":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n// Convert datetime string to timestamp in milliseconds\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Transform data to the desired format\nfunction transformFormatTable(data) {\n  const result = [];\n  for (const region in data) {\n    for (const country in data[region]) {\n      result.push({\n        \"Region\": region,\n        \"Country\": country,\n        \"Count\": data[region][country][0]\n      });\n    }\n  }\n  return result;\n}\n\n// Fetch user session data\nasync function fetchUserSessionData(query, from, to) {\n  const startTimestamp = toTimestamp(from);\n  const endTimestamp = toTimestamp(to);\n\n  const data = await rumUserSessionsClient.getUsqlResultAsTree({\n    startTimestamp,\n    endTimestamp,\n    query,\n  });\n\n  return data.values;\n}\n\nexport default async function () {\n  const query = `SELECT region, country, COUNT(DISTINCT userSessionId) as User \n                 FROM usersession \n                 WHERE useraction.application=\"${$Application}\" \n                 GROUP BY region, country`;\n  const data = await fetchUserSessionData(query, $dt_timeframe_from, $dt_timeframe_to);\n  console.log(data);\n  return transformFormatTable(data);\n}\n","visualization":"table","visualizationSettings":{"thresholds":[{"id":1,"field":"javascriptErrorCount","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":10},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":100}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative","showTotalValue":true,"hideLabels":false,"totalValueLabel":"User Sessions"},"categoryOverrides":{"FRUSTRATED":{"color":"var(--dt-colors-charts-loglevel-emergency-default, #9033a3)","added":1719282190769},"TOLERATED":{"color":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)","added":1719282205218},"SATISFIED":{"color":"var(--dt-colors-charts-categorical-themed-swamps-color-01-default, #1c520a)","added":1719282225825}},"categoricalBarChartSettings":{"categoryAxisLabel":"Region","valueAxisLabel":"Count","categoryAxis":"Region","valueAxis":"Count","layout":"vertical"},"legend":{"position":"bottom","hidden":false},"colorPalette":"categorical"},"singleValue":{"showLabel":true,"label":"üßçUsers Sessions","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"isVisible":false},"sparklineSettings":{"isVisible":false}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{},"sortBy":{"columnId":"[\"Count\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"Count"},"displayedFields":["Region"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"Count","rangeAxis":""}]},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1719290266231}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"54":{"type":"code","title":"","input":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n// Convert datetime string to timestamp in milliseconds\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Transform data to the desired format\nfunction transformFormatTable(data) {\n  const result = [];\n  for (const region in data) {\n    for (const country in data[region]) {\n      result.push({\n        \"Region\": region,\n        \"Country\": country,\n        \"Count\": data[region][country][0]\n      });\n    }\n  }\n  return result;\n}\n\n// Fetch user session data\nasync function fetchUserSessionData(query, from, to) {\n  const startTimestamp = toTimestamp(from);\n  const endTimestamp = toTimestamp(to);\n\n  const data = await rumUserSessionsClient.getUsqlResultAsTree({\n    startTimestamp,\n    endTimestamp,\n    query,\n  });\n\n  return data.values;\n}\n\nexport default async function () {\n  const query = `SELECT region, country, COUNT(DISTINCT userSessionId) as User \n                 FROM usersession \n                 WHERE useraction.application=\"${$Application}\" \n                 GROUP BY region, country`;\n  const data = await fetchUserSessionData(query, $dt_timeframe_from, $dt_timeframe_to);\n  console.log(data);\n  return transformFormatTable(data);\n}\n","visualization":"categoricalBarChart","visualizationSettings":{"thresholds":[{"id":1,"field":"javascriptErrorCount","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":10},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":100}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative","showTotalValue":true,"hideLabels":false,"totalValueLabel":"User Sessions"},"categoryOverrides":{"FRUSTRATED":{"color":"var(--dt-colors-charts-loglevel-emergency-default, #9033a3)","added":1719282190769},"TOLERATED":{"color":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)","added":1719282205218},"SATISFIED":{"color":"var(--dt-colors-charts-categorical-themed-swamps-color-01-default, #1c520a)","added":1719282225825}},"categoricalBarChartSettings":{"categoryAxisLabel":"Region","valueAxisLabel":"Count","categoryAxis":"Region","valueAxis":"Count","layout":"vertical"},"legend":{"position":"bottom","hidden":false},"colorPalette":"categorical"},"singleValue":{"showLabel":true,"label":"üßçUsers Sessions","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"isVisible":false},"sparklineSettings":{"isVisible":false}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{},"sortBy":{"columnId":"[\"Count\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"Count"},"displayedFields":["Region"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"Count","rangeAxis":""}]},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1719290266231}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"55":{"type":"code","title":"","input":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\n// Convert datetime string to timestamp in milliseconds\nfunction toTimestamp(datetime) {\n  return Date.parse(datetime);\n}\n\n// Transform data to the desired format\nfunction transformFormatTable(data) {\n  return Object.keys(data).map(key => ({\n    \"User Action\": key,\n    \"javascriptErrorCount\": data[key][0]\n  }));\n}\n\n// Fetch user session data\nasync function fetchUserSessionData(query, from, to) {\n  const startTimestamp = toTimestamp(from);\n  const endTimestamp = toTimestamp(to);\n\n  const data = await rumUserSessionsClient.getUsqlResultAsTree({\n    startTimestamp,\n    endTimestamp,\n    query,\n  });\n\n  return data.values;\n}\n\nexport default async function () {\n  const query = `select useraction.name, sum(useraction.javascriptErrorCount) as JavaScriptError\n                 FROM useraction \n                 where useraction.application = \"${$Application}\" \n                 group by useraction.name \n                 order by JavaScriptError DESC`;\n  const data = await fetchUserSessionData(query, $dt_timeframe_from, $dt_timeframe_to);\n  return transformFormatTable(data);\n}\n","visualization":"donutChart","visualizationSettings":{"thresholds":[{"id":1,"field":"javascriptErrorCount","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":10},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":100}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative","showTotalValue":true,"hideLabels":false,"totalValueLabel":"Java Script Error count"},"categoryOverrides":{"FRUSTRATED":{"color":"var(--dt-colors-charts-loglevel-emergency-default, #9033a3)","added":1719282190769},"TOLERATED":{"color":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)","added":1719282205218},"SATISFIED":{"color":"var(--dt-colors-charts-categorical-themed-swamps-color-01-default, #1c520a)","added":1719282225825}},"categoricalBarChartSettings":{"categoryAxisLabel":"User Action","valueAxisLabel":"javascriptErrorCount","categoryAxis":"User Action","valueAxis":"javascriptErrorCount","layout":"vertical"},"legend":{"position":"right","hidden":false},"colorPalette":"categorical"},"singleValue":{"showLabel":true,"label":"üßçUsers Sessions","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"isVisible":false},"sparklineSettings":{"isVisible":false}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{"[\"User Action\"]":952},"sortBy":{"columnId":"[\"javascriptErrorCount\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"javascriptErrorCount"},"displayedFields":["User Action"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"javascriptErrorCount","rangeAxis":""}]},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1719290266231}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},"layouts":{"1":{"x":6,"y":0,"w":18,"h":1},"2":{"x":10,"y":52,"w":14,"h":4},"3":{"x":6,"y":52,"w":4,"h":4},"4":{"x":10,"y":56,"w":14,"h":4},"5":{"x":6,"y":56,"w":4,"h":4},"6":{"x":0,"y":60,"w":24,"h":1},"7":{"x":0,"y":61,"w":24,"h":1},"10":{"x":9,"y":1,"w":15,"h":6},"11":{"x":6,"y":1,"w":3,"h":2},"15":{"x":0,"y":2,"w":6,"h":5},"21":{"x":0,"y":52,"w":6,"h":8},"23":{"x":0,"y":71,"w":24,"h":1},"24":{"x":0,"y":0,"w":6,"h":2},"25":{"x":0,"y":62,"w":24,"h":9},"26":{"x":6,"y":5,"w":3,"h":2},"27":{"x":6,"y":3,"w":3,"h":2},"29":{"x":0,"y":10,"w":6,"h":6},"30":{"x":6,"y":8,"w":18,"h":8},"31":{"x":0,"y":7,"w":6,"h":2},"32":{"x":6,"y":7,"w":18,"h":1},"33":{"x":0,"y":17,"w":6,"h":7},"35":{"x":13,"y":17,"w":11,"h":7},"36":{"x":13,"y":25,"w":11,"h":7},"37":{"x":6,"y":16,"w":18,"h":1},"38":{"x":0,"y":9,"w":6,"h":1},"39":{"x":0,"y":16,"w":6,"h":1},"40":{"x":0,"y":24,"w":6,"h":1},"41":{"x":0,"y":25,"w":6,"h":7},"42":{"x":6,"y":24,"w":18,"h":1},"43":{"x":6,"y":17,"w":7,"h":7},"44":{"x":6,"y":25,"w":7,"h":7},"46":{"x":0,"y":41,"w":8,"h":11},"47":{"x":0,"y":40,"w":24,"h":1},"48":{"x":0,"y":32,"w":24,"h":1},"50":{"x":0,"y":33,"w":6,"h":7},"53":{"x":6,"y":33,"w":7,"h":7},"54":{"x":13,"y":33,"w":11,"h":7},"55":{"x":8,"y":41,"w":16,"h":11}},"importedWithCode":true}