{"version":15,"variables":[{"key":"Search","type":"text","visible":true,"defaultValue":"easyTravel Customer Frontend"},{"key":"Service","type":"query","visible":true,"input":"fetch dt.entity.service\n| filter contains(entity.name,$Search)\n| filter serviceType == \"WEB_REQUEST_SERVICE\"\n| fields concat(entity.name,\" | \",id)","multiple":false},{"key":"ServiceId","type":"query","visible":false,"input":"data record(content = $Service)\n| fields content = splitString(content, \" | \")[1]","multiple":false},{"key":"ServiceName","type":"query","visible":false,"input":"data record(content = $Service)\n| fields content = splitString(content, \" | \")[0]","multiple":false}],"tiles":{"1":{"type":"markdown","title":"","content":"# $ServiceName:\n- SLO's\n- Metricas de servicio $Search\n- Metricas de servicio que llaman a $Search"},"6":{"type":"markdown","title":"","content":"#"},"7":{"type":"markdown","title":"","content":"## üåê Reporte detallado por servicios que llaman a $ServiceName"},"9":{"type":"markdown","title":"","content":"## ‚òùÔ∏è SERVICE $ServiceName: SLO's Disponibilidad y Performance"},"14":{"type":"code","title":"Detalle por Servicio WEB REQUEST","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\nimport { queryExecutionClient } from \"@dynatrace-sdk/client-query\";\n\nconst service_tag = \"SISACT_POSTPAGO\";\nconst service_type = \"WEB_REQUEST_SERVICE\";\n\nasync function fetchMetrics(query, from, to) {\n    const response = await metricsClient.query({ acceptType: 'application/json; charset=utf-8', from, to, metricSelector: query });\n    return response.result;\n}\n\nfunction transformarObjeto(objetoOriginal, nuevoNombre) {\n    return objetoOriginal.map(item => ({ serviceid: item.dimensions[1], servicename: item.dimensions[0], [nuevoNombre]: item.values[0] }));\n}\n\nexport default async function() {\n    \n    const filter = ':filter(or(in(\"dt.entity.service\",entitySelector(\"type(service),fromRelationship.CALLS(type(~\"SERVICE~\"),entityId(~\"'+$ServiceId+'~\"))\"))))';\n    const split = ':splitBy(\"dt.entity.service\")';\n    const entity_name = ':names'\n  \n    const metricas = {\n      \"Disponibilidad\" : '((100)*(builtin:service.errors.server.successCount'+filter+split+')/(builtin:service.requestCount.server'+filter+split+')):fold(avg):value:default(0)'+entity_name,\n      \"Performance\" : '(((builtin:service.response.time:avg:partition(\"latency\",value(\"good\",lt(10000)))'+filter+split+':count:default(0))/(builtin:service.response.time:avg'+filter+split+':count)*(100)):default(100,always)):fold(avg)'+entity_name,\n      \"Request Count\" : '(builtin:service.requestCount.total'+filter+split+':sort(value(auto,descending))):fold(sum)'+entity_name,\n      \"Tiempo respuesta\" : '(builtin:service.response.time'+filter+split+':sort(value(auto,descending))):fold(avg)'+entity_name,\n      \"Failure Rate\" : '(builtin:service.errors.total.rate'+filter+split+':sort(value(auto,descending))):fold(avg)'+entity_name,\n      \"Failure Count\" : '(builtin:service.errors.server.count'+filter+split+':sort(value(auto,descending))):fold(value)'+entity_name\n    };\n\n    console.log(metricas[\"Disponibilidad\"]);\n    console.log(metricas[\"Performance\"]);\n    console.log(metricas[\"Request Count\"]);\n    console.log(metricas[\"Tiempo respuesta\"]);\n    console.log(metricas[\"Failure Rate\"]);\n\n    let result = {};\n    \n    for (const metricName in metricas) {\n        if (metricas.hasOwnProperty(metricName)) {\n            const metric_response = await fetchMetrics(metricas[metricName], $dt_timeframe_from, $dt_timeframe_to);\n            const metric_data = transformarObjeto(metric_response[0].data, metricName);\n\n            for (const item of metric_data) {\n                if (!result[item.serviceid]) {\n                    result[item.serviceid] = { serviceid: item.serviceid, servicename: item.servicename };\n                }\n                result[item.serviceid][metricName] = item[metricName];\n            }\n        }\n    }\n\n    let finalResult = Object.values(result).map(item => {\n        return {\n            id: item.serviceid,\n            \"Service Name\": item.servicename,\n            \"Disponibilidad\": item[\"Disponibilidad\"],\n            //\"Performance\": item[\"Performance\"],\n            \"Request Count\": item[\"Request Count\"],\n            \"Tiempo respuesta\": item[\"Tiempo respuesta\"],\n            \"Failure Rate\": item[\"Failure Rate\"],\n            \"Failure Count\": item[\"Failure Count\"]\n        };\n    });\n\n    return finalResult;\n}\n","visualization":"table","visualizationSettings":{"thresholds":[{"id":1,"field":"Disponibilidad","title":"Disponibilidad","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":99},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":80},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0}]},{"id":2,"field":"Performance","title":"Performance","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":90},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":50},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0}]},{"id":4,"field":"Failure Rate","title":"Failure Rate","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0.5},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":0.1},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":0}]},{"id":5,"field":"Tiempo respuesta","title":"Tiempo Respuesta","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":1500000},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":2000000}]},{"id":6,"field":"id","title":"","isEnabled":true,"rules":[{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-05-default, #84859a)"},"comparator":"!=","label":"","value":"0"}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"id","valueAxis":"Disponibilidad","categoryAxisLabel":"id","valueAxisLabel":"Disponibilidad"},"hiddenLegendFields":[],"fieldMapping":{"timestamp":"Service Name","leftAxisValues":["Disponibilidad"],"leftAxisDimensions":["id"]}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[["id"],["Service"],["Disponibilidad"],["Performance"],["Request Count"],["Tiempo respuesta"],["Failure Rate"]],"columnWidths":{"[\"Service\"]":252.99826049804688,"[\"Failure Rate\"]":132.99826049804688},"colorThresholdTarget":"value","sortBy":{"columnId":"[\"Request Count\"]","direction":"descending"}},"honeycomb":{"shape":"square","dataMappings":{"value":"Disponibilidad"},"legend":"auto","displayedFields":["id"],"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Disponibilidad","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1708708838246},{"identifier":"Performance","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1708709010865},{"identifier":"Tiempo respuesta","unitCategory":"time","baseUnit":"microsecond","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1708709023759},{"identifier":"Failure Rate","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1708959408762},{"identifier":"Request Count","unitCategory":"unspecified","baseUnit":"count_per_request","displayUnit":null,"decimals":2,"suffix":"","delimiter":true,"added":1715675583067}],"histogram":{"dataMappings":[{"valueAxis":"Disponibilidad","rangeAxis":""},{"valueAxis":"Request Count","rangeAxis":""},{"valueAxis":"Tiempo respuesta","rangeAxis":""},{"valueAxis":"Failure Rate","rangeAxis":""},{"valueAxis":"Failure Count","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"23":{"type":"markdown","title":"","content":"#"},"25":{"type":"markdown","title":"","content":"#### SLO de Disponibilidad\n\n- El SLO de Disponibilidad mide el porcentaje de solicitudes exitosas frente al total de solicitudes para un servicio.\n\n#### SLO de Performance\n\n- El SLO de Performance eval√∫a el rendimiento del servicio basado en el tiempo de respuesta promedio, considerando como buenas las respuestas menores a 1 segundo para servicios.\n"},"26":{"type":"markdown","title":"","content":"## ‚òùÔ∏è SERVICE $ServiceName: Metricas de Servicio"},"27":{"type":"code","title":"Errores 5xx","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// La funci√≥n obtenerMetricas est√° optimizada para traer solamente los puntos de datos\nasync function obtenerMetricas(selectorMetrica, timeframe_from, timeframe_to) {\n    const response = await metricsClient.query({\n        acceptType: 'application/json; charset=utf-8',\n        from: Date.parse(timeframe_from).toString(),\n        to: Date.parse(timeframe_to).toString(),\n        metricSelector: selectorMetrica\n    });\n    return response.result[0][\"data\"];\n}\n\n// Modificamos esta parte para que el resultado solo contenga timestamps y valores\nexport default async function() {\n    // Definimos el selector de m√©tricas para la consulta\n    let consulta_metricasPorAplicacion = 'builtin:service.errors.fivexx.count:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityId(~\"'+$ServiceId+'~\")\"))))):splitBy()'\n    const metricasPorAplicacion = await obtenerMetricas(consulta_metricasPorAplicacion, $dt_timeframe_from, $dt_timeframe_to);\n\n    // Estructuramos la informaci√≥n para representarla en gr√°ficos, eliminando nombre de la app\n    let resultados = [];\n  \n    for (let i = 0; i < metricasPorAplicacion.length; i++) {\n        for (let j = 0; j < metricasPorAplicacion[i].timestamps.length; j++) {\n            resultados.push({\n                \"timestamp\": new Date(metricasPorAplicacion[i].timestamps[j]).toISOString(),\n                \"Disponibilidad Promedio\": metricasPorAplicacion[i].values[j]\n            });\n        }\n    }\n\n    // Devolvemos solo los resultados sin tipo, ya que no es necesario mapear los tipos de datos\n    return resultados;\n}\n","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{},"leftYAxisSettings":{"scale":"linear","min":"data-min","max":"auto"},"seriesOverrides":[],"legend":{"hidden":true},"colorPalette":"vulnerability-status","fieldMapping":{"timestamp":"timestamp","leftAxisValues":["Disponibilidad Promedio"],"leftAxisDimensions":[]},"hiddenLegendFields":[]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Disponibilidad Promedio"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Disponibilidad Promedio","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":1,"suffix":"","delimiter":false,"added":1708705283321}],"histogram":{"dataMappings":[{"valueAxis":"Disponibilidad Promedio","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"29":{"type":"code","title":"Errores 4xx","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// La funci√≥n obtenerMetricas est√° optimizada para traer solamente los puntos de datos\nasync function obtenerMetricas(selectorMetrica, timeframe_from, timeframe_to) {\n    const response = await metricsClient.query({\n        acceptType: 'application/json; charset=utf-8',\n        from: Date.parse(timeframe_from).toString(),\n        to: Date.parse(timeframe_to).toString(),\n        metricSelector: selectorMetrica\n    });\n    return response.result[0][\"data\"];\n}\n\n// Modificamos esta parte para que el resultado solo contenga timestamps y valores\nexport default async function() {\n    // Definimos el selector de m√©tricas para la consulta\n    let consulta_metricasPorAplicacion = 'builtin:service.errors.fourxx.count:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityId(~\"'+$ServiceId+'~\")\"))))):splitBy()'\n    const metricasPorAplicacion = await obtenerMetricas(consulta_metricasPorAplicacion, $dt_timeframe_from, $dt_timeframe_to);\n\n    // Estructuramos la informaci√≥n para representarla en gr√°ficos, eliminando nombre de la app\n    let resultados = [];\n  \n    for (let i = 0; i < metricasPorAplicacion.length; i++) {\n        for (let j = 0; j < metricasPorAplicacion[i].timestamps.length; j++) {\n            resultados.push({\n                \"timestamp\": new Date(metricasPorAplicacion[i].timestamps[j]).toISOString(),\n                \"Performance Promedio\": metricasPorAplicacion[i].values[j]\n            });\n        }\n    }\n\n    // Devolvemos solo los resultados sin tipo, ya que no es necesario mapear los tipos de datos\n    return resultados;\n}\n","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{},"leftYAxisSettings":{"scale":"linear","min":"data-min","max":"auto"},"seriesOverrides":[],"legend":{"hidden":true},"colorPalette":"vulnerability-status","fieldMapping":{"timestamp":"timestamp","leftAxisValues":["Performance Promedio"],"leftAxisDimensions":[]},"hiddenLegendFields":[]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Performance Promedio"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Performance Promedio","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":1,"suffix":"","delimiter":false,"added":1708705283321}],"histogram":{"dataMappings":[{"valueAxis":"Performance Promedio","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"30":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// Funci√≥n de request de data por query\nasync function fetchMetrics(query: string, from: string, to: string) {\n  const response = await metricsClient.query({\n    acceptType: 'application/json; charset=utf-8', \n    from: from,\n    to: to,\n    metricSelector: query // Aqu√≠ utilizamos el par√°metro\n  });\n  return response.result;\n}\n\n// Funci√≥n principal\nexport default async function() {\n\n  // data de prueba\n  const from = new Date($dt_timeframe_from)\n  const to = new Date($dt_timeframe_to)\n  \n  const from_request = from.toISOString().slice(0, 19)\n  const to_request = to.toISOString().slice(0, 19)\n\n  const filter = ':filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityId(~\"'+$ServiceId+'~\")\")))))';\n  const metrica = 'builtin:service.response.time'+filter+':splitBy():sort(value(auto,descending)):fold(avg)';\n  \n  const metric_response = await fetchMetrics(metrica, from_request, to_request);\n  const metric_data = metric_response[0].data[0][\"values\"][0];\n  \n  return {\"result\" : metric_data };\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"result","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":500000},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":1000000}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"Tiempo Respuesta","prefixIcon":"ClockIcon","recordField":"result","autoscale":true,"alignment":"center","colorThresholdTarget":"background"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"result"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"result","unitCategory":"time","baseUnit":"microsecond","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1716236282953}],"histogram":{"dataMappings":[{"valueAxis":"result","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"32":{"type":"markdown","title":"","content":"#"},"33":{"type":"markdown","title":"","content":"#\n#### Descripci√≥n del Dashboard\nEste dashboard muestra el estado y rendimiento de la integraci√≥n con $Search, destacando m√©tricas clave de disponibilidad, rendimiento y tasa de fallos de los servicios involucrados. Tambi√©n se presentan los SLOs de disponibilidad y performance para evaluar el cumplimiento de los objetivos del servicio."},"34":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// Funci√≥n de request de data por query\nasync function fetchMetrics(query: string, from: string, to: string) {\n  const response = await metricsClient.query({\n    acceptType: 'application/json; charset=utf-8', \n    from: from,\n    to: to,\n    metricSelector: query // Aqu√≠ utilizamos el par√°metro\n  });\n  return response.result;\n}\n\n// Funci√≥n principal\nexport default async function() {\n\n  // data de prueba\n  const from = new Date($dt_timeframe_from)\n  const to = new Date($dt_timeframe_to)\n  \n  const from_request = from.toISOString().slice(0, 19)\n  const to_request = to.toISOString().slice(0, 19)\n\n  const filter = ':filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityId(~\"'+$ServiceId+'~\")\")))))';\n  const metrica = 'builtin:service.errors.total.rate'+filter+':splitBy():sort(value(auto,descending)):fold(avg)';\n  \n  const metric_response = await fetchMetrics(metrica, from_request, to_request);\n  const metric_data = metric_response[0].data[0][\"values\"][0];\n  \n  return {\"result\" : metric_data };\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"result","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":1},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":5}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"Failure Rate","prefixIcon":"ResourceContentionIcon","recordField":"result","autoscale":true,"alignment":"center","colorThresholdTarget":"background"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"result"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"result","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1716236431020}],"histogram":{"dataMappings":[{"valueAxis":"result","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"35":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// Funci√≥n de request de data por query\nasync function fetchMetrics(query: string, from: string, to: string) {\n  const response = await metricsClient.query({\n    acceptType: 'application/json; charset=utf-8', \n    from: from,\n    to: to,\n    metricSelector: query // Aqu√≠ utilizamos el par√°metro\n  });\n  return response.result;\n}\n\n// Funci√≥n principal\nexport default async function() {\n\n  // data de prueba\n  const from = new Date($dt_timeframe_from)\n  const to = new Date($dt_timeframe_to)\n  \n  const from_request = from.toISOString().slice(0, 19)\n  const to_request = to.toISOString().slice(0, 19)\n\n  const filter = ':filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityId(~\"'+$ServiceId+'~\")\")))))';\n  const metrica = 'builtin:service.requestCount.total'+filter+':splitBy():sort(value(auto,descending)):fold(sum)';\n  \n  const metric_response = await fetchMetrics(metrica, from_request, to_request);\n  const metric_data = metric_response[0].data[0][\"values\"][0];\n  \n  return {\"result\" : metric_data };\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"result","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-logstatus-none-default, #2c2f3f)"},"comparator":"‚â•","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":""},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":""}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"Request Count","prefixIcon":"ResourceContentionIcon","recordField":"result","autoscale":true,"alignment":"center","colorThresholdTarget":"background"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"result"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"result","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":2,"suffix":"","delimiter":true,"added":1716236572907}],"histogram":{"dataMappings":[{"valueAxis":"result","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"36":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// La funci√≥n obtenerMetricas est√° optimizada para traer solamente los puntos de datos\nasync function obtenerMetricas(selectorMetrica, timeframe_from, timeframe_to) {\n    const response = await metricsClient.query({\n        acceptType: 'application/json; charset=utf-8',\n        from: Date.parse(timeframe_from).toString(),\n        to: Date.parse(timeframe_to).toString(),\n        metricSelector: selectorMetrica\n    });\n    return response.result[0][\"data\"];\n}\n\n// Modificamos esta parte para que el resultado solo contenga timestamps y valores\nexport default async function() {\n    // Definimos el selector de m√©tricas para la consulta\n    const filter = ':filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityId(~\"'+$ServiceId+'~\")\")))))';\n    let consulta_metricasPorAplicacion = '(100)*(builtin:service.errors.client.successCount'+filter+':splitBy())/(builtin:service.requestCount.client'+filter+':splitBy())'\n    const metricasPorAplicacion = await obtenerMetricas(consulta_metricasPorAplicacion, $dt_timeframe_from, $dt_timeframe_to);\n    console.log(consulta_metricasPorAplicacion);\n\n    // Estructuramos la informaci√≥n para representarla en gr√°ficos, eliminando nombre de la app\n    let resultados = [];\n  \n    for (let i = 0; i < metricasPorAplicacion.length; i++) {\n        for (let j = 0; j < metricasPorAplicacion[i].timestamps.length; j++) {\n            resultados.push({\n                \"timestamp\": new Date(metricasPorAplicacion[i].timestamps[j]).toISOString(),\n                \"Disponibilidad Promedio\": metricasPorAplicacion[i].values[j]\n            });\n        }\n    }\n\n    // Devolvemos solo los resultados sin tipo, ya que no es necesario mapear los tipos de datos\n    return resultados;\n}\n","visualization":"lineChart","visualizationSettings":{"thresholds":[{"id":1,"field":"","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":99},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":98},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0},{"id":3,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":100}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{},"leftYAxisSettings":{"scale":"linear","min":"data-min","max":"auto"},"seriesOverrides":[],"legend":{"hidden":true},"colorPalette":"vulnerability-status","fieldMapping":{"timestamp":"timestamp","leftAxisValues":["Disponibilidad Promedio"],"leftAxisDimensions":[]},"hiddenLegendFields":[]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Disponibilidad Promedio"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Disponibilidad Promedio","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":1,"suffix":"","delimiter":false,"added":1708705283321}],"histogram":{"dataMappings":[{"valueAxis":"Disponibilidad Promedio","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"37":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// Funci√≥n de request de data por query\nasync function fetchMetrics(query: string, from: string, to: string) {\n  const response = await metricsClient.query({\n    acceptType: 'application/json; charset=utf-8', \n    from: from,\n    to: to,\n    metricSelector: query // Aqu√≠ utilizamos el par√°metro\n  });\n  return response.result;\n}\n\n// Funci√≥n principal\nexport default async function() {\n\n  // data de prueba\n  const from = new Date($dt_timeframe_from)\n  const to = new Date($dt_timeframe_to)\n  \n  const from_request = from.toISOString().slice(0, 19)\n  const to_request = to.toISOString().slice(0, 19)\n\n  const filter = ':filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityId(~\"'+$ServiceId+'~\")\")))))';\n  const metrica = '((100)*(builtin:service.errors.client.successCount'+filter+':splitBy())/(builtin:service.requestCount.client'+filter+':splitBy())):fold(avg)';\n  \n  const metric_response = await fetchMetrics(metrica, from_request, to_request);\n  const metric_data = metric_response?.[0]?.data?.[0]?.values?.[0] ?? 0;\n  \n  return {\"Disponibilidad promedio\" : metric_data };\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"Disponibilidad promedio","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":99},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-06-default, #a9780f)"},"comparator":"‚â•","label":"","value":98},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"IntegrationsIcon","recordField":"Disponibilidad promedio","autoscale":true,"alignment":"center","colorThresholdTarget":"background"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Disponibilidad promedio"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Disponibilidad promedio","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1708704212646}],"histogram":{"dataMappings":[{"valueAxis":"Disponibilidad promedio","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"38":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// La funci√≥n obtenerMetricas est√° optimizada para traer solamente los puntos de datos\nasync function obtenerMetricas(selectorMetrica, timeframe_from, timeframe_to) {\n    const response = await metricsClient.query({\n        acceptType: 'application/json; charset=utf-8',\n        from: Date.parse(timeframe_from).toString(),\n        to: Date.parse(timeframe_to).toString(),\n        metricSelector: selectorMetrica\n    });\n    return response.result[0][\"data\"];\n}\n\n// Modificamos esta parte para que el resultado solo contenga timestamps y valores\nexport default async function() {\n    // Definimos el selector de m√©tricas para la consulta\n    const filter = ':filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityId(~\"'+$ServiceId+'~\")\")))))';\n    let consulta_metricasPorAplicacion = '((builtin:service.response.time:avg:partition(\"latency\",value(\"good\",lt(10000)))'+filter+':splitBy():count:default(0))/(builtin:service.response.time:avg'+filter+':splitBy():count)*(100)):default(100,always)'\n    const metricasPorAplicacion = await obtenerMetricas(consulta_metricasPorAplicacion, $dt_timeframe_from, $dt_timeframe_to);\n\n    // Estructuramos la informaci√≥n para representarla en gr√°ficos, eliminando nombre de la app\n    let resultados = [];\n  \n    for (let i = 0; i < metricasPorAplicacion.length; i++) {\n        for (let j = 0; j < metricasPorAplicacion[i].timestamps.length; j++) {\n            resultados.push({\n                \"timestamp\": new Date(metricasPorAplicacion[i].timestamps[j]).toISOString(),\n                \"Performance Promedio\": metricasPorAplicacion[i].values[j]\n            });\n        }\n    }\n\n    // Devolvemos solo los resultados sin tipo, ya que no es necesario mapear los tipos de datos\n    return resultados;\n}\n","visualization":"lineChart","visualizationSettings":{"thresholds":[{"id":1,"field":"","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":90},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"‚â•","label":"","value":50},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0},{"id":3,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":100}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{},"leftYAxisSettings":{"scale":"linear","min":"data-min","max":"auto"},"seriesOverrides":[],"legend":{"hidden":true},"colorPalette":"vulnerability-status","fieldMapping":{"timestamp":"timestamp","leftAxisValues":["Performance Promedio"],"leftAxisDimensions":[]},"hiddenLegendFields":[]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"element","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Performance Promedio"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Performance Promedio","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":1,"suffix":"","delimiter":false,"added":1708705283321}],"histogram":{"dataMappings":[{"valueAxis":"Performance Promedio","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"39":{"type":"code","title":"","input":"import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n// Funci√≥n de request de data por query\nasync function fetchMetrics(query: string, from: string, to: string) {\n  const response = await metricsClient.query({\n    acceptType: 'application/json; charset=utf-8', \n    from: from,\n    to: to,\n    metricSelector: query // Aqu√≠ utilizamos el par√°metro\n  });\n  return response.result;\n}\n\n// Funci√≥n principal\nexport default async function() {\n\n  // data de prueba\n  const from = new Date($dt_timeframe_from)\n  const to = new Date($dt_timeframe_to)\n  \n  const from_request = from.toISOString().slice(0, 19)\n  const to_request = to.toISOString().slice(0, 19)\n\n  const filter = ':filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityId(~\"'+$ServiceId+'~\")\")))))';\n  const metrica = '(((builtin:service.response.time:avg:partition(\"latency\",value(\"good\",lt(10000)))'+filter+':splitBy():count:default(0))/(builtin:service.response.time:avg'+filter+':splitBy():count)*(100)):default(100,always)):fold(avg)';\n  \n  const metric_response = await fetchMetrics(metrica, from_request, to_request);\n  const metric_data = metric_response?.[0]?.data?.[0]?.values?.[0] ?? 0;\n  \n  return {\"Performance promedio\" : metric_data };\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"Performance promedio","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #649438)"},"comparator":"‚â•","label":"","value":90},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-06-default, #a9780f)"},"comparator":"‚â•","label":"","value":50},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"‚â•","label":"","value":0}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"ResourceContentionIcon","recordField":"Performance promedio","autoscale":true,"alignment":"center","colorThresholdTarget":"background"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"square","dataMappings":{"value":"Performance promedio"},"displayedFields":[null],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"unitsOverrides":[{"identifier":"Performance promedio","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1708704212646}],"histogram":{"dataMappings":[{"valueAxis":"Performance promedio","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},"layouts":{"1":{"x":0,"y":0,"w":10,"h":3},"6":{"x":0,"y":16,"w":24,"h":1},"7":{"x":0,"y":25,"w":24,"h":1},"9":{"x":0,"y":3,"w":24,"h":1},"14":{"x":0,"y":26,"w":24,"h":7},"23":{"x":0,"y":33,"w":24,"h":1},"25":{"x":0,"y":4,"w":24,"h":4},"26":{"x":0,"y":17,"w":24,"h":1},"27":{"x":0,"y":20,"w":12,"h":4},"29":{"x":12,"y":20,"w":12,"h":4},"30":{"x":0,"y":18,"w":8,"h":2},"32":{"x":0,"y":24,"w":24,"h":1},"33":{"x":10,"y":0,"w":14,"h":3},"34":{"x":8,"y":18,"w":8,"h":2},"35":{"x":16,"y":18,"w":8,"h":2},"36":{"x":6,"y":8,"w":18,"h":4},"37":{"x":0,"y":8,"w":6,"h":4},"38":{"x":6,"y":12,"w":18,"h":4},"39":{"x":0,"y":12,"w":6,"h":4}},"importedWithCode":true}